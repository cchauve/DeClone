#######################################################
#                      DeClone                        #
#######################################################

DeClone is a software for the prediction of ancestral adjacencies in reconciled
 gene trees.

1. Installation/requirements

    DeClone requires the following pieces of software to be installed prior to 
    its compilation:
      a. Python 2.7 (may function with any version <3 but not tested);
      b. GNU gcc/g++ 4.8 and more recent
      c. GNU make

    Once these requirements are met, DeClone can be compiled from its sources by
    running make in the installation directory.

    Rem.: If your gcc version is prior to 4.8 and does not offer extensive 
    support for C++ 11, you may still compile DeClone with a restricted set of 
    features (i.e. no polytope propagation functionalities, used in the 
    parametric analysis) by instead running 
        
        make DeClone

2. Running DeClone

    DeClone typically takes two reconciled gene trees, and an extant adjacency 
    list, as input. It offers a variety of output types, as described below.

2.1 Usage and options

    Usage: DeClone [-t1|--tree1] v1 [-t2|--tree2] v2 [-a|--adjacencies] adj [opts]
    Where
      v1  - (Path to) Gene Tree 1 (Newick format)
      v2  - (Path to) Gene Tree 2 (Newick format)
      adj - Path to a list of adjacent extant genes

    Modes (default: -p):
      -b,--backtrack k   - Stochastic sampling of k adjacency trees
      -c,--count-coopts  - Count the number of co-optimal adjacency trees
      -h,--help          - Displays help and exits
      -i,--in-out        - Inside-outside mode
      -l,--adjpolytope   - Runs polytope propagation with gain cost, break cost and 2 genes as parameters
                           Requires file with pairs of genes specified by node id in Newick file
      -n,--count         - Count the number of valid adjacency trees
      -p,--parsimony     - Maximum parsimony mode, returns the minimum cost for an adjacency forest (default)
      -s,--show-coopts   - Show all co-optimal adjacency trees
      -x,--all           - Exhaustive enumeration of adjacency trees
      -y,--polytope      - Runs polytope propagation with gain cost and break cost as parameters
      -z,--part-fun      - Computes partition function for instance

    Parameters:
      -d,--draw f        - Draws output to file f (mode-dependent)
      -kT val            - Sets Boltzmann 'constant' (i.e. temperature) to a given value (def.=1.0)
      -m,--matrix        - Outputs a matrix for the adjacency tree (only for -s and -b modes)
      -r,--rescale val   - Sets rescaling factor (def.=1.0)
      -sc,--score g b    - Sets costs for adjacency gains (g) and breaks (b) (def.=(1.0,1.0))
      -v,--verbose       - Verbose mode, provides more (possibly unnecessary) information

2.2 Input formats

    2.2.a (Extended) Newick gene trees

        The input gene trees must be binary trees specified in Extended Newick 
        (NHX) format. The branch lengths may default to 1.0. Each leaf node must
         have one of the following as its node name.
        - If it is an extant gene, UNIQUE_NAME|SPECIES_NAME. 
        - If it is a gene loss, LOSS|SPECIES_ID. 

        Every node must have the following information encoded in the NHX list. 
        - An event Ev (equals one of GDup, Spec, GLos).
        - An integer species id.
 
    2.2.b Extant adjacency list 

        The extant adjacency list must contain pairs of extant genes, referred 
        to by their unique name at the leaves of the tree. The genes in each 
        pair must be separated by a single space. The pairs themselves must be  
        separated by a newline.

    2.2.c Ancestral adjacency list (Polytope propagation, i.e. '-l' option)

        In order to refer to an ancestral gene in a gene tree, we use the 
        unique depth first search order assigned to a node when left children 
        are queried first. 

        The ancestral adjacency list consists of pairs of ancestral gene ids on 
        each line. The ids of genes from the first gene tree are listed in the 
        first column, and those from the second gene tree are list in the 
        second column. In a line, the ids are separated by a space. 

        It is important to note that the order in which the gene trees and 
        ancestral adjacencies are ordered matters. This is because there is no 
        unique id for an ancestral gene, and two such genes on different gene 
        trees may have the same id as assigned by the DFS.

    
2.3 Output types

    2.3.a Adjacency forests

        Modes: -k, -s, -x
        
        Adjacency forests are specified as a set of NHX trees, with each 
        internal node containing the DFS ids of pair of genes that have been 
        considered for the adjacency, listed in the order of the trees given. 
        

    2.3.b Matrices

        Modes: -k,-s,-x (with -m option), -i by default
        
        The matrix output first lists the set of extant leaf adjacencies, in 
        the same format as the input leaf adjacencies. This is followed by a 
        matrix, with the rows annotated by DFS ids of nodes from the first gene  
        tree, and the columns annotated by the DFS ids of nodes from the second 
        gene tree. 

        The entry (i,j), i and j being annotations (not row and column numbers), 
        in the matrix can carry the following information.

        - The entry is 1 if the adjacency is present, and 0 otherwise.
        - For the -i option, the entry represents the probability that the 
          adjacency is present in an adjacency forest sampled randomly from a 
          Boltzmann distribution.


    2.3.c Polytopes

2.4 Advanced options
    ... add discussion about Rescaling and kT ...

3. References
